//==============================================================================
// Welcome to shader authoring in Meta Spark Studio!
//==============================================================================
using namespace std;

export vec2 plainParallax(float depth)
{
  vec4 TangentView = getInverseModelMatrix() * getInverseViewMatrix() * vec4(1.,1.,1.,100.);
  vec3 TangentViewPos  = getTangentFrame() * TangentView.xyz;
  vec3 TangentFragPos  = getTangentFrame() * getVertexTexCoord().xy1;

  vec3 viewDir = normalize(TangentViewPos - TangentFragPos);
  vec2 P = (viewDir.xy * vec2(-1.,1.)) / viewDir.z * depth;

  return getVertexTexCoord() - P;
}

export vec2 ParallaxMapping(vec2 texCoords, Texture2d depthMap, float heightScale)
{
    vec4 TangentView = getInverseModelMatrix() * getInverseViewMatrix() * vec4(1.,1.,1.,100.);
    vec3 TangentViewPos  = getTangentFrame() * TangentView.xyz;
    vec3 TangentFragPos  = getTangentFrame() * getVertexTexCoord().xy1;

    // offset texture coordinates with Parallax Mapping
    vec3 viewDir = normalize(TangentViewPos - TangentFragPos);

    // number of depth layers
    const float minLayers = 8.;
    const float maxLayers = 32.;
    float numLayers = mix(maxLayers, minLayers, abs(dot(vec3(0.0, 0.0, 1.0), viewDir)));
    // calculate the size of each layer
    float layerDepth = 1.0 / numLayers;
    // depth of current layer
    float currentLayerDepth = 0.0;
    // the amount to shift the textue coordinates per layer (from vector P)
    vec2 P = (viewDir.xy * vec2(-1.,1.)) / viewDir.z * heightScale;
    vec2 deltaTexCoords = P / numLayers;

    // get initial values
    vec2  currentTexCoords     = texCoords;
    float currentDepthMapValue = depthMap.sample(currentTexCoords).r; // texture(depthMap, currentTexCoords).r;

    while(currentLayerDepth < currentDepthMapValue)
    {
        // shift texture coordinates along direction of P
        currentTexCoords -= deltaTexCoords;
        // get depthmap value at current texture coordinates
        currentDepthMapValue = depthMap.sample(currentTexCoords).r;
        // get depth of next layer
        currentLayerDepth += layerDepth;
    }

    // get texture coordinates before collision (reverse operations)
    vec2 prevTexCoords = currentTexCoords + deltaTexCoords;

    // get depth after and before collision for linear interpolation
    float afterDepth  = currentDepthMapValue - currentLayerDepth;
    float beforeDepth = depthMap.sample(prevTexCoords).r - currentLayerDepth + layerDepth;

    // interpolation of texture coordinates
    float weight = afterDepth / (afterDepth - beforeDepth);
    vec2 finalTexCoords = prevTexCoords * weight + currentTexCoords * (1.0 - weight);

    return finalTexCoords;
}

void main(Texture2d tex, Texture2d depth, float depthMax, out vec4 Color) {
    vec2 texCoords = ParallaxMapping(getVertexTexCoord(), depth, depthMax);
    vec2 texCoords2 = plainParallax(depthMax);
    Color = tex.sample(texCoords);
}
